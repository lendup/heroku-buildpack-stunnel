#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Configure environment
set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x            # enable debugging

# Functions
function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"
  stack="$4"

  mkdir -p $location
  package="https://artifactory.gameofloans.com/artifactory/blob-store/org.stunnel/${engine}/${engine}-${version}.tar.gz"
  curl_opts=""
  if [[ -n "$ARTIFACTORY_USERNAME" ]] && [[ -n "$ARTIFACTORY_PASSWORD" ]] ; then
      curl_opts="-u ${ARTIFACTORY_USERNAME}:${ARTIFACTORY_PASSWORD}"
  fi
  echo "fetching $package to $location. username: '$ARTIFACTORY_USERNAME'"
  curl $curl_opts $package -s -o - | tar xzf - -C $location
}

# Clean up leaking environment
unset GIT_DIR

# Version
if [ "$STACK" == "cedar-14" ]; then
  STUNNEL_VERSION="5.17"
else
  STUNNEL_VERSION="5.02"
fi

# Directories
BUILD_DIR=$1
CACHE_DIR=$2
BUILDPACK_DIR="$(dirname $(dirname $0))"
VENDORED_STUNNEL="vendor/stunnel"

echo "Using stunnel version: ${STUNNEL_VERSION}" | indent
echo "Using stack version: ${STACK}" | indent

# Vendor stunnel into the slug
PATH="$BUILD_DIR/$VENDORED_STUNNEL/bin:$PATH"
echo "-----> Fetching and vendoring stunnel"
mkdir -p "$BUILD_DIR/$VENDORED_STUNNEL"
package_download "stunnel" "${STUNNEL_VERSION}" "${BUILD_DIR}/${VENDORED_STUNNEL}" "${STACK}"

echo "-----> Moving the configuration generation script into app/bin"
mkdir -p $BUILD_DIR/bin
cp "$BUILDPACK_DIR/bin/stunnel-conf.sh" $BUILD_DIR/bin
chmod +x $BUILD_DIR/bin/stunnel-conf.sh

echo "-----> Moving the start-stunnel script into app/bin"
mkdir -p $BUILD_DIR/bin
cp "$BUILDPACK_DIR/bin/start-stunnel" $BUILD_DIR/bin/
chmod +x $BUILD_DIR/bin/start-stunnel

echo "-----> stunnel done"
